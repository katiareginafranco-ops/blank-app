import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="An√°lise das Causas de Nota Zero na Reda√ß√£o do ENEM 2024",
    layout="wide"
)

# Exibe o t√≠tulo da p√°gina
st.title("An√°lise das Causas de Nota Zero na Reda√ß√£o do ENEM 2024")

# Exibe o nome do autor logo abaixo, usando markdown para it√°lico
st.markdown("_Por: K√°tia Regina Franco_")

# Exemplo de colunas
coluna1, coluna2 = st.columns((2, 1))
with coluna1:

    # ---- T√≠tulo e Introdu√ß√£o da P√°gina Inicial ----
    st.title("üìä Desvendando a Reda√ß√£o ENEM 2024: Por que a Nota Zero?")
    st.markdown("""
        Bem-vindo ao prot√≥tipo de an√°lise das reda√ß√µes do ENEM 2024.
        Aqui, voc√™ pode explorar e entender os principais motivos que levam as
        reda√ß√µes a receberem a nota zero, uma situa√ß√£o que pode ser evitada com
        informa√ß√£o e estudo.
    
        Neste aplicativo, vamos desmistificar os crit√©rios de anula√ß√£o para ajudar
        estudantes e educadores a se prepararem melhor. Embora o recorte se d√° nos resultados do estado do Esp√≠rito Santo, estudantes de outros estados tamb√©m podem utilizar as informa√ß√µes e dicas.
    """)
st.markdown("---")
with coluna2: 
    with st.container(border=True):
     # Lista dos cards com t√≠tulo, √≠cone e conte√∫do
        cards = [
        {
            "titulo": "1. Fuga total ao tema",
            "tipo": "error",
            "icone": "üö®",
            "conteudo": """
            A reda√ß√£o deve abordar o tema proposto pelo ENEM. Se o texto foge completamente do
            assunto, o participante recebe nota zero.
            """
        },
        {
            "titulo": "2. C√≥pia dos textos motivadores",
            "tipo": "warning",
            "icone": "üìÑ",
            "conteudo": """
            Copiar trechos dos textos de apoio (os chamados "textos motivadores")
            tamb√©m anula a reda√ß√£o. O texto deve ser autoral, usando os textos motivadores
            apenas como refer√™ncia.
            """
        },
        {
            "titulo": "3. Anulada - Desenhos ou improp√©rios",
            "tipo": "info",
            "icone": "‚úçÔ∏è",
            "conteudo": """
            Qualquer tipo de desenho, anota√ß√£o indevida ou ofensa no espa√ßo da reda√ß√£o, nome, assinatura, pode
            levar √† anula√ß√£o, j√° que pode ser um tipo de c√≥digo para identificar o participante.
            """
        },
        {
            "titulo": "4. Desrespeito aos Direitos Humanos",
            "tipo": "success",
            "icone": "‚öñÔ∏è",
            "conteudo": """
            A proposta de interven√ß√£o, que √© um dos crit√©rios de avalia√ß√£o, n√£o pode
            violentar os direitos humanos.
            """
        },
        {
            "titulo": "5. N√£o atendimento ao tipo textual",
            "tipo": "error",
            "icone": "üìö",
            "conteudo": """
            O texto precisa ser um "dissertativo-argumentativo". Qualquer outra forma,
            como poema, narra√ß√£o, ou receita, resulta em nota zero.
            """
        },
        {
            "titulo": "6. Texto com at√© 7 linhas",
            "tipo": "warning",
            "icone": "üìè",
            "conteudo": """
            A reda√ß√£o deve ter, no m√≠nimo, 8 linhas escritas.
            """
        },
        {
            "titulo": "7. Texto com Parte desconectada",
            "tipo": "info",
            "icone": "üîó",
            "conteudo": """
            A reda√ß√£o cont√©m trechos sem rela√ß√£o com o tema proposto ou com o projeto de texto do candidato, atentando contra a seriedade da prova, tais como hino de time de futebol ou receita culin√°ria.
            """
        },
        {
            "titulo": "8. Folha de reda√ß√£o em branco",
            "tipo": "success",
            "icone": "üìÑ",
            "conteudo": """
            A folha de reda√ß√£o n√£o cont√©m texto algum escrito.
            """
        },
    ]

    # Mostra um dropdown para selecionar um card
        st.subheader("Escolha um dos motivos de Nota Zero:")
        opcao = st.selectbox(
        "",
        [f"{card['titulo']}" for card in cards]
    )

    # Filtra o card selecionado
        card_selecionado = next(card for card in cards if card["titulo"] == opcao)

        # Exibe o card com o tipo de mensagem correto
        tipo = card_selecionado["tipo"]
        texto = card_selecionado["titulo"]
        icone = card_selecionado["icone"]
        conteudo = card_selecionado["conteudo"]

        if tipo == "error":
            st.error(f"{texto}", icon=icone)
        elif tipo == "warning":
            st.warning(f"{texto}", icon=icone)
        elif tipo == "info":
            st.info(f"{texto}", icon=icone)
        elif tipo == "success":
            st.success(f"{texto}", icon=icone)

        st.markdown(conteudo)

# ---- Se√ß√£o "Sobre e Fontes" ----
st.subheader("Sobre este Projeto e Fontes de Dados")
st.markdown("""
    Este √© um projeto acad√™mico da disciplina *Cloud Computing para produtos de dados*, do curso de p√≥s-gradua√ß√£o **Minera√ß√£o de Dados Educacionais**.
    O objetivo √© usar dados abertos para gerar insights e ferramentas √∫teis.
   
    **Fonte de Dados:**
    Os dados utilizados para a futura expans√£o do aplicativo vir√£o dos
    **Microdados do ENEM**, disponibilizados anualmente pelo **INEP**.
""")
st.markdown("---")

st.set_page_config(page_title="An√°lise ENEM ES 2024", layout="wide")

st.title("üìö An√°lise da Reda√ß√£o - ENEM ES 2024")

# üìù Apresenta√ß√£o da se√ß√£o de an√°lise
st.markdown("""
## ‚úçÔ∏è An√°lise dos Status da Reda√ß√£o

Nesta se√ß√£o, voc√™ pode analisar como as reda√ß√µes foram avaliadas pela banca.  
Cada tipo de status ‚Äî como *em branco*, *anulada*, *v√°lida*, entre outros ‚Äî √© representado por um n√∫mero espec√≠fico, descrito na tabela abaixo.  

Essas informa√ß√µes ajudam a entender a distribui√ß√£o dos participantes por status da reda√ß√£o, considerando **munic√≠pio** e **tipo de escola**.

---

### üóÇÔ∏è Tabela de C√≥digos de Status da Reda√ß√£o

| C√≥digo | Descri√ß√£o                           |
|--------|-------------------------------------|
| 1      | Sem problemas                       |
| 2      | Anulada                             |
| 3      | C√≥pia do texto motivador            |
| 4      | Em branco                           |
| 6      | Fuga ao tema                        |
| 7      | N√£o atendimento ao tipo textual     |
| 8      | Texto insuficiente                  |
| 9      | Parte desconectada                  |

---
""")
st.markdown("---")

# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide", page_title="An√°lise ENEM Reda√ß√£o")
st.title("üìä An√°lise de Dados do ENEM")
st.markdown("---")

# Fun√ß√£o para carregar os dados com cache
# Usamos st.cache_data para evitar recarregar o arquivo sempre que a p√°gina for alterada
@st.cache_data
def carregar_dados(uploaded_file):
    """Carrega o arquivo CSV em um DataFrame do Pandas."""
    try:
        # Tenta ler o arquivo
        df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
        # Limpa nomes de colunas (opcional, mas boa pr√°tica)
        df.columns = df.columns.str.strip()
        return df
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo. Certifique-se de que √© um CSV v√°lido. Detalhe: {e}")
        return pd.DataFrame()

# Upload do arquivo
uploaded_file = st.file_uploader("üì•ENEM_ES_2024_REDA√á√ÉO.csv", type=["csv"])

df = pd.DataFrame()
df_filtrado = pd.DataFrame()
if uploaded_file is not None:
    df = carregar_dados(uploaded_file)
    
    if not df.empty:
        st.success("Arquivo carregado com sucesso! Utilize a barra lateral para aplicar os filtros.")

        # üîé Visualiza√ß√£o inicial
        if st.checkbox("üëÄ Visualizar primeiras linhas da tabela"):
            st.subheader("Primeiras 5 Linhas")
            st.dataframe(df.head())

        # üéõÔ∏è Sidebar para filtros
        st.sidebar.header("üîç Configura√ß√£o de Filtros")

        # Garante que as colunas existem antes de tentar acessar
        try:
            municipios = sorted(df['NOME MUN. PROVA'].dropna().unique())
            status_redacao = sorted(df['STATUS REDA√á√ÉO'].dropna().unique())
            tipos_escola = sorted(df['DEP. ADMIN.'].dropna().unique())
        except KeyError as e:
            st.error(f"Erro: Coluna {e} n√£o encontrada no arquivo. Verifique se o cabe√ßalho est√° correto.")
            st.stop()
            
        # Controles Multiselect
        municipio_filtro = st.sidebar.multiselect("Filtrar por Munic√≠pio", municipios, default=municipios)
        status_filtro = st.sidebar.multiselect("Filtrar por Status da Reda√ß√£o", status_redacao, default=status_redacao)
        escola_filtro = st.sidebar.multiselect("Filtrar por Tipo de Escola", tipos_escola, default=tipos_escola)

        # üßπ Aplicando os filtros
        df_filtrado = df[
            (df['NOME MUN. PROVA'].isin(municipio_filtro)) &
            (df['STATUS REDA√á√ÉO'].isin(status_filtro)) &
            (df['DEP. ADMIN.'].isin(escola_filtro))
        ]

        # Resultados dos Filtros (Usa df_filtrado)
        st.markdown("---")
        st.subheader(f"Resultados Filtrados ({len(df_filtrado)} registros)")

        if df_filtrado.empty:
            st.warning("Nenhum dado corresponde aos filtros selecionados.")
        else:
            # 1. Estat√≠sticas R√°pidas
            st.markdown("##### Estat√≠sticas da Reda√ß√£o")
            
             # Prepara os c√°lculos dos Status
            most_frequent_status, least_frequent_status, most_frequent_count, least_frequent_count = ('N/A', 'N/A', 0, 0)
            status_exists = 'STATUS REDA√á√ÉO' in df_filtrado.columns
            if status_exists:
                status_counts = df_filtrado['STATUS REDA√á√ÉO'].value_counts()
                if not status_counts.empty:
                    most_frequent_status = status_counts.index[0]
                    most_frequent_count = status_counts.iloc[0]
                    # Encontra o menos frequente de forma segura
                    if len(status_counts) > 1:
                        least_frequent_status = status_counts.index[-1]
                        least_frequent_count = status_counts.iloc[-1]
                    else:
                        # Se s√≥ houver um status, ele √© o mais e menos frequente
                        least_frequent_status = most_frequent_status
            
            # Linha 1: Contagem e Status de Ocorr√™ncia
            col1, col2, col3 = st.columns(3)
            col1.metric("Total de Candidatos Filtrados", len(df_filtrado))
            
            # M√©trica de maior ocorr√™ncia (Status)
            col2.metric("Status Reda√ß√£o de Maior Ocorr√™ncia", most_frequent_status, delta=f"{most_frequent_count} registros" if status_exists else None)
            
            # M√©trica de menor ocorr√™ncia (Status)
            col3.metric("Status Reda√ß√£o de Menor Ocorr√™ncia", least_frequent_status, delta=f"{least_frequent_count} registros" if status_exists and len(status_counts) > 1 else None)
            st.markdown("---")
            
            # 2. Visualiza√ß√£o da Tabela Filtrada
            st.markdown("## üìÑ Exibi√ß√£o da Tabela Completa Filtrada")
            st.dataframe(df_filtrado, use_container_width=True)
            
            # 3. Download
            @st.cache_data
            def convert_df(df):
                # Converte o DataFrame para CSV para download
                return df.to_csv(index=False).encode('utf-8')

            csv = convert_df(df_filtrado)

            st.download_button(
                label="‚¨áÔ∏è Baixar Dados Filtrados (CSV)",
                data=csv,
                file_name='enem_dados_filtrados.csv',
                mime='text/csv',
            )
            
    else:
        st.warning("O DataFrame carregado est√° vazio. Verifique a estrutura do seu arquivo CSV.")

        st.markdown("---")

    # 2. Gera√ß√£o do Mapa de Calor (Distribui√ß√£o de Status por Munic√≠pio)
            # df_mapa_status √© necess√°rio para o Heatmap e para o Gr√°fico de Barras Agrupadas (Se√ß√£o 5)
    df_mapa_status = pd.DataFrame() # Inicializa fora do if para evitar erro de escopo no Bloco 5
    if status_exists and 'NOME MUN. PROVA' in df_filtrado.columns:
                st.markdown("---")
                st.subheader("üî• Mapa de Calor: Distribui√ß√£o do Status da Reda√ß√£o por Munic√≠pio")

                # Agrupando os dados filtrados para calcular a contagem de cada status por munic√≠pio
                df_mapa_status = df_filtrado.groupby(['NOME MUN. PROVA', 'STATUS REDA√á√ÉO']).size().reset_index(name='Contagem Status')

                # Criando o mapa de calor de Status vs. Munic√≠pio com Altair
                heatmap_chart_status = alt.Chart(df_mapa_status).mark_rect().encode(
                    # Eixo X: Munic√≠pio (Nome da Prova)
                    x=alt.X('NOME MUN. PROVA', sort='y', title='Munic√≠pio de Prova'),
                    # Eixo Y: Status da Reda√ß√£o (Aprovado, Anulada, etc.)
                    y=alt.Y('STATUS REDA√á√ÉO', title='Status da Reda√ß√£o'),
                    # Cor: Contagem de Status (intensidade do calor)
                    color=alt.Color('Contagem Status', 
                                    # Usando uma escala de cores (heatmap) adequada para contagens
                                    scale=alt.Scale(range='viridis'), 
                                    title='Contagem'),
                    # Tooltip para exibir detalhes ao passar o mouse
                    tooltip=['NOME MUN. PROVA', 'STATUS REDA√á√ÉO', 'Contagem Status']
                ).properties(
                    # T√≠tulo do gr√°fico e largura total
                    title="Contagem de Cada Status de Reda√ß√£o por Munic√≠pio",
                ).interactive() # Permite zoom e pan

                # Exibe o gr√°fico no Streamlit
                st.altair_chart(heatmap_chart_status, use_container_width=True)
    else:
                st.warning("N√£o √© poss√≠vel gerar o mapa de calor. As colunas 'NOME MUN. PROVA' e/ou 'STATUS REDA√á√ÉO' n√£o foram encontradas.")
            
            
            # ----------------------------------------------------------------------
    # 3. Gera√ß√£o do Gr√°fico de Pizza (Propor√ß√£o de Status)
    if status_exists:
                st.markdown("---")
                st.subheader("ü•ß Propor√ß√£o Total dos Status da Reda√ß√£o")

                # Reutiliza status_counts calculado anteriormente
                df_pizza = status_counts.reset_index(name='Contagem').rename(columns={'index': 'STATUS REDA√á√ÉO'})

                # Calcula a porcentagem para o tooltip
                total_count = df_pizza['Contagem'].sum()
                df_pizza['Porcentagem'] = (df_pizza['Contagem'] / total_count) * 100

                base = alt.Chart(df_pizza).encode(
                    theta=alt.Theta("Contagem", stack=True)
                )

                pie_chart = base.mark_arc(outerRadius=120).encode(
                    color=alt.Color("STATUS REDA√á√ÉO", title="Status"),
                    # Ordena as fatias por contagem (maior para menor)
                    order=alt.Order("Contagem", sort="descending"),
                    tooltip=["STATUS REDA√á√ÉO", "Contagem", alt.Tooltip("Porcentagem", format=".1f", title="Percentual")]
                ).properties(
                    title="Distribui√ß√£o Percentual de Status"
                )

                # Adiciona texto no centro do gr√°fico (para um donut chart, mas funciona para pie)
                text = base.mark_text(radius=140).encode(
                    text=alt.Text("Porcentagem", format=".1f"),
                    order=alt.Order("Contagem", sort="descending"),
                    color=alt.value("black") # Define a cor do texto para melhor contraste
                )

                # Combina o gr√°fico de pizza e o texto
                final_chart = pie_chart.interactive()
                
                # Exibe o gr√°fico no Streamlit
                st.altair_chart(final_chart, use_container_width=True)

            # ----------------------------------------------------------------------
    # 4. Gera√ß√£o do Gr√°fico de Barras (Distribui√ß√£o do Status da Reda√ß√£o)
    if 'STATUS REDA√á√ÉO' in df_filtrado.columns and not df_filtrado['STATUS REDA√á√ÉO'].empty:
                st.markdown("---")
                st.subheader("üìä Gr√°fico de Barras: Frequ√™ncia Global do Status da Reda√ß√£o")

                # Cria o gr√°fico de barras
                bar_chart = alt.Chart(df_filtrado).mark_bar().encode(
                    # Eixo X: STATUS REDA√á√ÉO (Vari√°vel Categ√≥rica)
                    x=alt.X('STATUS REDA√á√ÉO', title='Status da Reda√ß√£o', sort='-y'),
                    # Eixo Y: Contagem de registros (frequ√™ncia)
                    y=alt.Y('count()', title='Frequ√™ncia (Contagem de Candidatos)'),
                    # Tooltip para intera√ß√£o
                    tooltip=[
                        alt.Tooltip('STATUS REDA√á√ÉO', title='Status'),
                        'count()'
                    ]
                ).properties(
                    title='Frequ√™ncia dos Status da Reda√ß√£o no ENEM'
                ).interactive()

                st.altair_chart(bar_chart, use_container_width=True)
    else:
                st.info("N√£o √© poss√≠vel gerar o Gr√°fico de Barras. A coluna 'STATUS REDA√á√ÉO' n√£o foi encontrada ou n√£o possui dados v√°lidos na sele√ß√£o atual.")

            # ----------------------------------------------------------------------
        # 5. Gera√ß√£o do Gr√°fico de Barras Agrupadas (Compara√ß√£o Status x Munic√≠pio)
    if not df_mapa_status.empty:
                st.markdown("---")
                st.subheader("üìä Compara√ß√£o: Frequ√™ncia de Status por Munic√≠pio")
                st.caption("Cada cor representa um munic√≠pio, e as barras mostram a contagem de cada Status da Reda√ß√£o.")

        # Cria o Gr√°fico de Barras Agrupadas
                grouped_bar_chart = alt.Chart(df_mapa_status).mark_bar().encode(
                    # Eixo X: Define a posi√ß√£o principal pelo Status
                    x=alt.X('STATUS REDA√á√ÉO', title='Status da Reda√ß√£o'),
                    # Eixo Y: Define a altura pela Contagem
                    y=alt.Y('Contagem Status', title='Contagem de Candidatos'),
                    # Cor: Define a cor pelo Munic√≠pio (o que queremos comparar)
                    color=alt.Color('NOME MUN. PROVA', title='Munic√≠pio'),
                    # xOffset: Desloca as barras dentro da mesma categoria STATUS REDA√á√ÉO, agrupando-as
                    xOffset='NOME MUN. PROVA',
                    tooltip=['STATUS REDA√á√ÉO', 'NOME MUN. PROVA', 'Contagem Status']
                ).properties(
                    title="Frequ√™ncia de Status de Reda√ß√£o por Munic√≠pio"
                ).interactive()

                st.altair_chart(grouped_bar_chart, use_container_width=True)
    elif status_exists and 'NOME MUN. PROVA' in df_filtrado.columns:
                 st.info("Os dados para o Gr√°fico de Barras Agrupadas (Status x Munic√≠pio) n√£o est√£o prontos. Verifique se os filtros est√£o aplicados corretamente.")
            # ----------------------------------------------------------------------
    st.markdown("---")
            